<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin McNamee]]></title>
  <link href="http://kevinmcnamee.github.com/atom.xml" rel="self"/>
  <link href="http://kevinmcnamee.github.com/"/>
  <updated>2013-01-02T14:34:30-05:00</updated>
  <id>http://kevinmcnamee.github.com/</id>
  <author>
    <name><![CDATA[Kevin McNamee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make it Happen: My New Year's Actions]]></title>
    <link href="http://kevinmcnamee.github.com/blog/2013/01/02/make-it-happen-my-new-years-resolutions/"/>
    <updated>2013-01-02T12:24:00-05:00</updated>
    <id>http://kevinmcnamee.github.com/blog/2013/01/02/make-it-happen-my-new-years-resolutions</id>
    <content type="html"><![CDATA[<p><img src="http://kevinmcnamee.github.com/images/2013_post.jpg" title="'2013 a New Year'" ></p>

<p>Here we are again&#8230; The first week of a brand new year. This is the time we ask ourselves &#8220;How can I be better this year?&#8221;. The gyms are flooded with new members, random acts of kindness increase, new blog posts flood your Twitter timeline. The best of intentions are put into action. This trend will continue for a week or 2 and then normal life will resume. I am the first to jump this bandwagon of self-improvement. Unlike years past, I am truly looking to hold myself accountable for a handful of actions to improve certain aspects of my life.</p>

<p>By far my acheles heel is distraction and procrastination. Even as I am writing this, I see my blue Twitter notification staring me in the face. How long can I control myslef to continue writing and not browse my feed. I know the second I click that little birdie, I am on my way down a minimum 30 minute path of destruction reading Hacker News, blogs, stats, articles, Surfline, and facebook. During this period of weakness, I am most likely to read an article about increasing focus and productivity. Eff you irony.</p>

<p>2013 will be a pivotal year in my life. Professionally and personally, this year will meet me with more positivity than any previous year. I say this with confidence because I have spent the past 2 years building myself to a position where I can live how I want to live. Most important to this development was my decision to learn code and the stars which aligned to bring me through one of the greatest experiences of my life, <a href="http://www.flatironschool.com">Flatiron School</a>. Laser focus is a vital element to moving in the right direction at a high rate. True accountability is the only way for someone like myself to stay true and focused. Accountability starts here with my New Year&#8217;s Actions. I call them actions because resolutions are too easily broken.</p>

<h2>The Action list</h2>

<p>My list is longer than any previous year. It also has much more substance; a result of careful planning geared towards improving my overall wellness. The following is loosely written in reverse order of importance:</p>

<ul>
<li>Exercise</li>
<li>Floss daily</li>
<li>Inbox Zero</li>
<li>Read one programming book and one non-programming book per month</li>
<li>Write 500 words per day</li>
<li>Create an application with consistent recurring monthly revenue</li>
</ul>


<p>There is nothing too wild on my list. Certainly, each is very much attainable. Each action on the list is important to my health, happiness, productivity and growth. A few are quite general so I&#8217;d like to dive a bit deeper for details on my expectations.</p>

<h2>Exercise Consistently and Floss Daily</h2>

<p>Thanks to my parents and their parents and their parents, I am blessed with great natural health, the ability to maintain a consistently low BMI and excellent muscle memory. The downside to this is that I do not see the physical signs of being out of shape. Therefore, general working out has never been a high priority for me. I look to change this. I am not interested in exercising so that I can look better in a bathing suit. I am interested in increasing my focus and discipline.</p>

<p>The mental benefits of consistent exercise is what I am going for. Focus, good sleep, physical and mental energy are important to my success. My exercise routine is nothing crazy. I will start by running (and walking a bunch I am sure) for 20 minutes 4 times per week with some light pushups and situps. I will utilize <a href="http://runkeeper.com/">RunKeeper</a> to track my fitness.</p>

<p>I have never flossed consistently and I would like to keep all of my teeth. I am using the<a href="http://lift.do/">Lift iphone app</a> to keep track of and hold accountability for my new habits.</p>

<h2>Inbox Zero</h2>

<p>I first came across <a href="http://inboxzero.com/video/">Inbox Zero</a> while working with <a href="http://www.blutonemedia.com">Bluetone Media</a> in 2010. This is an amazing practice for productivity and punctuality. I am using Lift to make sure each day ends in Inbox Zero.</p>

<p><em>I also highly recommend using <a href="http://www.boomeranggmail.com/">Boomerang for Gmail</a> to really stay on top of your email efficiency game</em></p>

<h2>Read One Programming Book and One Non-Programming Book per Month</h2>

<p>I read more in 2012 than ever before. In doing so I&#8217;ve picked up several skills, improved my vocabulary, and have improved my mental health. However, I will have to admit that I started a hell of a lot more books than I have finished. On my bookshelf right now, I have more than a handful of books that have bookmarkers stuck somewhere halfway through their pages. I think it is part of my lack of focus which inhibts me from finishing a book. I would like to change this.</p>

<p>Most books I read this year were programming specific. 90% of the non-programming books were non-fiction. For some reason, I cannot bring myself to enjoying a novel. Not that I am specifically committing myself to read more fiction, I would however like to read a few solid novels over the next 12 months.</p>

<p>After each book I complete, I will write a short review. This will help hold myself accountable for actually finishing the book, improve my critical thinking, and help with my next (and most important) goal&#8230;</p>

<h2>Write a Minimum of 500 Words per Day</h2>

<p>This is by far my number one goal for 2013. Writing 500 words does not mean I will blog every single day. It does not mean that I will publish something meaningful each day or even every few days. Much of what I write will never see the light of day. The fact is that I do not consider myself a particularly good writer. However, I get great satisfaction from putting my thoughts into a tangible form.</p>

<p>The benefits I expect to get from writing everyday are to: improve my memory, expand my vocabulary, learn by teaching (generally programming specific), expand my network, overcome insecurities, and provide myself with a resource of, well myself. I intend to write a lot about coding, my thoughts on business &amp; education, life in general. I have many strong opinions regarding society in general but my insecurities hold me back from expressing my thoughts in meaningful ways. I have an awful fear of rejection and confrontation which I hope to overcome by my writings.</p>

<p>I can not say this enough; writing each day is so important to my growth over the next 12 months.</p>

<h2>Create an Application with Consistent Recurring Monthly Revenue</h2>

<p>Just as I start and do not finish so many books, I start many projects that quickly fade into the depths of my Github account. I am giving myself 6 months to create an application that provides a consistent monthly recurring revenue model. As of now, I do not intend on placing a value on the monthly revenue amount. Just that I have an application that solves the needs of a particular vertical enough that I have users willing to pay a fee each month to access this service.</p>

<p>This was one of the reasons why I wanted to beginning programming in the first place. Further inspired by <a href="http://nathanbarry.com/starting-web-app-challenge/">a recent blog post by Nathan Barry</a>, I intend on seeing this through. Nathan is a talented and admirably focused entrepreneur. His goals are far more ambitious than mine but he also has a track of success under his belt in the form of e-books and other applications.</p>

<p>I am lucky enough to have experiences in many small business verticals from my days in selling local TV advertising. I know many pains small business owners face on a daily basis. I will utilize my experiences and network of contacts to find a niche and tackle a specific problem. I will most likely focus on the home improvement services industry (landscaping, construction, plumbing, etc) but do not have any specifics ironed out just yet.</p>

<p>I will follow up with a detailed plan of action to loosely follow over the next 6 months.</p>

<p>I look forward to what is on the horizon in 2013.</p>

<p><em>In addition, I am looking for a position as a Junior Ruby on Rails Developer. I live in NYC and am currently speaking with several startups to find the right fit. If you or anyone you know is interested in speaking, you can find me here or mcnameekm@gmail.com</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Don't Need has and belongs to many Relationships]]></title>
    <link href="http://kevinmcnamee.github.com/blog/2012/11/07/why-you-dont-need-has-and-belongs-to-many-relationships/"/>
    <updated>2012-11-07T09:02:00-05:00</updated>
    <id>http://kevinmcnamee.github.com/blog/2012/11/07/why-you-dont-need-has-and-belongs-to-many-relationships</id>
    <content type="html"><![CDATA[<p>When mapping associations between models in your Rails application, you will inevitably come to a point when two models both &#8216;has&#8217; and &#8216;belongs_to&#8217; each other. In this situation, you need to choose between a has_many :through relationship and a has_and_belongs_to_many relationship.</p>

<p>Given the ease and minimal keystrokes needed, you might think a has_and_belongs_to_many relationship is the way to go. I mean, it is an association built into the ethers of Active Record, so it must be the path to choose right? Wrong. When creating associations between models, you almost never know how this relationship will blossom as your application grows. I want to show you how potentially dangerous a has_and_belongs_to_many relationship can turn out. By taking a few steps upfront to setup a solid has_many :through relationship with an associated join table, you provide yourself with a huge amount of flexibility down the road.</p>

<p>Let&#8217;s start by explaining the usage of these similar but distinctly exclusive association types. We will use the all too familiar association between cops and perpetrators:</p>

<h3>has_and_belongs_to_many</h3>

<p>This script to setup this association is dangerously simple. I&#8217;ll show a little later in this post how this can blow up in your face.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cop</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:perps</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Perp</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:cops</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>has_many :through</h3>

<p>A has_many :through association is used to setup a many to many relationship with another model in your application. This assocation uses a join table to connect the models allowing each to both &#8216;has&#8217; and &#8216;belong_to&#8217; each model. In this case, our cop can have many perps to bust and our perps can belong to the many cops who will inevitably violate them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cop</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:cop_perps</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:perps</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:cop_perps</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Perp</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:cop_perps</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:cops</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:cop_perps</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CopPerp</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:cop</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:perps</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This relationship now allows for extending the association within the join table. There are a few additional steps you need to take to setup this association that are not necessary for the previous example. First, you must create a migration for the perps table and insert belongs_to associations for the other models. You also need to create an additional line of code on each <code>Cop</code> and <code>Perp</code> tables.</p>

<p>The extra 10 minutes you take to setup this association will potentially save you hours of work and headache if you decide you now need to extend the cop_perps table in the future.</p>

<h3>When to use has_and_belongs_to_many (hint: never)</h3>

<p><a href="http://guides.rubyonrails.org/association_basics.html#choosing-between-has_many-through-and-has_and_belongs_to_many">Rails Guides</a> says that &#8220;You should use has_many :through if you need validations, callbacks, or extra attributes on the join model&#8221;. As the great coding philosopher <a href="http://shitavisays.tumblr.com/">Avi Flombaum</a> once eluded, how can you possibly know that your join model will not serve an additional purpose this early in the application process. No matter where you are in the development stage, you can never see so far in the future to know you will not need to extend the join table.</p>

<p>For instance, what if we want to add some more information to how a cop and his perp are associated? In the case of the has_many :through association, we can change the name of CopPerp model to Tickets, add a migration to change the table name from cops_perps to tickets, and update the associations in the models. Now we can add information to the Tickets model such as time of arrest, court date, status, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cop</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tickets</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:perps</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:tickets</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Perp</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tickets</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:cops</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:tickets</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ticket</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:cop</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:perps</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This task is much more difficult had we used the has_and_belongs_to_many association. We would have to go back and manually create the join table and has_many :through associations. Otherwise, the only information we could ever access is that a cop belongs to a perp and a perp belongs to a cop.</p>

<p>What do you think of this theory? Can you offer a reason where you absolutely think using a has_and_belongs_to_many association is superior to has_many :through?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usage of Modules as Mixins in Ruby]]></title>
    <link href="http://kevinmcnamee.github.com/blog/2012/10/20/uses-for-modules-in-ruby/"/>
    <updated>2012-10-20T08:19:00-04:00</updated>
    <id>http://kevinmcnamee.github.com/blog/2012/10/20/uses-for-modules-in-ruby</id>
    <content type="html"><![CDATA[<p>Modules are similar to classes except they don&#8217;t have instances and don&#8217;t have subclasses. In ruby, modules can provide value in a wide range of uses. Modules collect related methods and constants in one singular location to share  behavior across classes. Mixins allow for exactly this.</p>

<p>Without even writing a module, you are using mixins everyday throughout your ruby programs. You are most likely utilizing enumerables everyday. Enumerables are just modules built into ruby&#8217;s standard library. Enumerables are a set of methods that are accessable across all classes in ruby. To visualize this, let&#8217;s take a look at what we see if we check for the ancestors of the <code>Array</code> class in irb:</p>

<pre><code>&gt;&gt; Array.ancestors
=&gt; [Array, Enumerable, Object, Kernal, BasicObject]
</code></pre>

<p>You can see that <code>Enumerable</code> is mixed in to the object hierarchy of the <code>Array</code> class. The array is not a subclass of Enumerable, but rather inherits the behaviors and full set of methods from the enumerables.</p>

<p>To show an example, we want to create two classes: a <code>Movie</code> class and a <code>Song</code> class. We want each class to have similar behavior in that instances of each class can be thumbed up or thumbed down. We wouldn&#8217;t want to create a superclass in order share theses methods because we don&#8217;t want any shared properties other than the ability to be thumbed up or thumbed down. In this case, we will create a module called <code>Rankable</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Rankable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">thumbs_up</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> got a thumbs up and now has a rank of </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">rank</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">thumbs_down</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> got a thumbs down and now has a rank of </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">rank</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can create our two classes for Movies and Songs. By including the Rankable module in both the <code>Movie</code> class as well as the <code>Song</code> class, we are able to augment the behavior to vote our movies and songs up and down.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rankable&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Movie</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rankable</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:rank</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>      <span class="vi">@rank</span> <span class="o">=</span> <span class="n">rank</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Song</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Rankable</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:rank</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>      <span class="vi">@rank</span> <span class="o">=</span> <span class="n">rank</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s now create a new movie instance and pass the <code>thumbs_up</code> method. You can see by mixing in the <code>Rankable</code> module, we have access to the thumbs_up method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">movie1</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Argo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">movie1</span><span class="o">.</span><span class="n">thumbs_up</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">movie1</span><span class="o">.</span><span class="n">rank</span> <span class="c1">#=&gt; &quot;Argo got a thumbs up and now has a rank of 6!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A similar method is accessible when we instantiate a new instance of the <code>Song</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">song1</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Gangnam Style&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">song1</span><span class="o">.</span><span class="n">thumbs_down</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">movie1</span><span class="o">.</span><span class="n">rank</span> <span class="c1">#=&gt; &quot;Gangnam Style got a thumbs down and now has a rank of 4!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as we looked at the ancestor hierarchy of the Array class earlier, when we check the ancestors of <code>Movie</code> or <code>Song</code> we will see a similar output. The difference here is, instead of <code>Enumerable</code> which remember is a module built into the ruby library, we will see our custom module, <code>Rankable</code> between the <code>Movie</code> class and <code>Object</code>.</p>

<pre><code>&gt;&gt; Movie.ancestors
=&gt; [Movie, Rankable, Object, Kernal, BasicObject]
</code></pre>

<p>When a method is passed to an instance of the <code>Movie</code> class, it will first look in the <code>Movie</code> class for the behavior of that method. If the the instance does not find that method in it&#8217;s direct class, it will start going up the chain of superclasses to find the method behavior. Before checking the next direct superclass, the instance will check for a method in the direct module. If no module exists, the class instance will only then look in direct superclass. The image visualizes this action.</p>

<p><img class="[class]" src="http://kevinmcnamee.github.com/images/modules.jpg"></p>

<p>Mixins are great for abstracting behaviors from your classes and ensuring you do are not creating duplicate code in your programs. This is a basic overview of using modules as mixins. Modules can flex the power of your ruby code in much deeper ways including a replacement of monkey patching your code as well as namespacing. Look for more in depth posts on each of these topics in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Brief Overview of Programming the Web with Ruby]]></title>
    <link href="http://kevinmcnamee.github.com/blog/2012/10/14/an-introduction-to-programming-the-web-with-ruby/"/>
    <updated>2012-10-14T18:39:00-04:00</updated>
    <id>http://kevinmcnamee.github.com/blog/2012/10/14/an-introduction-to-programming-the-web-with-ruby</id>
    <content type="html"><![CDATA[<p>Programming for the web is limited only by the person or persons behind the keyboard. Programming for the web with Ruby has an elegance and positive energy which pulls me in. I recently came across a great Speaker Deck slide from <a href="https://github.com/rgua">&#8216;RailsGirls Ukraine&#8217;</a> which I will use to explain a brief overview of programming for the web using Ruby.</p>

<div class='speakerdeck center' style='width: 400px;'>
<script async class="speakerdeck-embed" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<h2>Computers Are Dumb</h2>

<div class='speakerdeck right' style='width: 200px;'>
<script async class="speakerdeck-embed" data-slide="2" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<div class='speakerdeck right' style='width: 200px;'>
<script async class="speakerdeck-embed" data-slide="3" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<p>Contrary to popular belief, computers are stupid. They do exactly what you tell them to do. If I tell you to make me a grilled cheese sandwich, I can expect at a minimum a couple of slices of bread with melted cheese in the middle. If I request the same from a computer, I will get nothing. I have to tell the computer a series of hundreds of commands to explain every minute detail to get my sandwich.</p>

<p>Programming is telling a computer exactly what you want it to do.</p>

<h2>Doing it All with Ruby</h2>

<p>The Ruby programming language was created in 1995 by Yukihiro Matsumoto (also known as &#8216;Matz&#8217;). Matz created the Ruby language because he wanted to simply create programs in a language that made him happy. This thought process is reflective throughout the Ruby community. In fact there is a well know acronym within the Ruby community known as MINSWAN (Matz is nice so we are nice).</p>

<p>The Ruby language is desinged to emphasize human readability rather than machine readability. As reflected in the aforementioned Speaker Deck, take a look at the following code written in a C language followed by the same output written in Ruby.</p>

<figure class='code'><figcaption><span>holler.cpp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello blog reader number 1!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and, now the Ruby version</p>

<figure class='code'><figcaption><span>holler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello blog reader number 1!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seriously, Ruby is that much more awesomer!</p>

<h2>How the Web Works</h2>

<div class='speakerdeck center' style='width: 300px;'>
<script async class="speakerdeck-embed" data-slide="8" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<p>The internet is comprised of billions of unique IP addresses. Every machine, from your computer to your smartphone to the server that displays your favorite website, is communicating through this unique address.</p>

<p>It is nearly impossible for you to remember the IP address of any single website, let alone all of the websites you enjoy visiting. For this reason, we use Domain Name Servers (DNS) to assign each website to a human readable domain name.</p>

<h2>The Anatomy of a Website</h2>

<p>Now that you know how we communicate with a website, the fun part begins! Most websites you visit are &#8220;Dynamic&#8221; in that they process data on the server side based on continuous input/output. These websites use applications, databases, and servers in order to offer up a multitude of content. Let&#8217;s use the RailsGirls presentation to look a little deeper.</p>

<div style="clear:both"></div>




<div class='speakerdeck right' style='width: 200px;'>
<script async class="speakerdeck-embed" data-slide="12" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<h3>The Client</h3>

<p>On the web, the &#8220;Client&#8221; refers to the end user. In most cases, this is the web browser on your computer or smartphone. This browser is what we use to communicate with the Application, Database, and Web Server.</p>

<div style="clear:both"></div>


<h3>Application</h3>

<div class='speakerdeck right' style='width: 200px;'>
<script async class="speakerdeck-embed" data-slide="14" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<p>The application is the brains behind any website. While all components of a website rely on each other equally, the application is the center, the leader, the guy everyone else in the stack follows. This is where the Ruby programming language comes into play. You can see on the slide to the right that there are many possible languages written for the web. Although Ruby is certainly not the only language to program for the web, I love Ruby and you should too!</p>

<div style="clear:both"></div>


<h3>Database</h3>

<div class='speakerdeck right' style='width: 200px;'>
<script async class="speakerdeck-embed" data-slide="15" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<p>The database is where all of the information on a website or web application is stored. How do you think Instagram keeps track of all of the awesome pictures you&#8217;ve taken lately? The application communicates with the database everytime you login, accesses all of your information, and serves it to you (the client). See, it all makes sense now!</p>

<div style="clear:both"></div>


<h3>Web Server</h3>

<div class='speakerdeck right' style='width: 200px;'>
<script async class="speakerdeck-embed" data-slide="16" data-id="50701165dbcbfb00020788d6" data-ratio="1.3333333333333333" src="http://kevinmcnamee.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<p>As we learned earlier, the web server is how where all communication on the web happens. Think of the web server as a highway with a ton of roads (and no speeding tickets!). There are several types of servers but they all share a similar purpose, COMMUNICATION.</p>

<div style="clear:both"></div>


<p>So, there you have it. A very basic overview of how the internets work. This is my first post, things will get a bit more complicated from here!</p>

<p>Thanks to RailsGirls Ukraine for putting together this awesome visual for me to use!</p>
]]></content>
  </entry>
  
</feed>
